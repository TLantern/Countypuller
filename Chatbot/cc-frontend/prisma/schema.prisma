generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model lis_pendens_filing {
  case_number      String   @id
  case_url         String?
  file_date        DateTime
  property_address String
  filing_no        String?
  volume_no        String?
  page_no          String?
  county           String
  created_at       DateTime @default(now())
  is_new           Boolean  @default(true)
  doc_type         String
  userId           String
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model md_case_search_filing {
  case_number             String    @id
  case_url                String?
  file_date               DateTime?
  party_name              String?
  case_type               String?
  county                  String?
  created_at              DateTime  @default(now())
  is_new                  Boolean   @default(true)
  doc_type                String?
  userId                  String
  property_address        String?
  defendant_info          String?
  case_details_raw        String?
  case_details_scraped_at DateTime?
  user                    User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model hillsborough_nh_filing {
  id                String    @id @default(uuid())
  document_number   String    @unique
  document_url      String?
  recorded_date     DateTime?
  instrument_type   String?
  grantor           String?
  grantee           String?
  property_address  String?
  book_page         String?
  consideration     String?
  legal_description String?
  county            String    @default("Hillsborough NH")
  state             String    @default("NH")
  filing_date       String?
  amount            String?
  parties           String?
  location          String?
  status            String    @default("active")
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  is_new            Boolean   @default(true)
  doc_type          String    @default("lien")
  userId            String
  user              User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([document_number])
}

model brevard_fl_filing {
  id               String    @id @default(uuid())
  case_number      String    @unique
  document_url     String?
  file_date        DateTime?
  case_type        String?
  party_name       String?
  property_address String?
  county           String    @default("Brevard")
  created_at       DateTime  @default(now())
  is_new           Boolean   @default(true)
  userId           String
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([case_number])
}

model fulton_ga_filing {
  id            String    @id @default(uuid())
  case_number   String    @unique
  document_type String?
  filing_date   DateTime?
  debtor_name   String?
  claimant_name String?
  county        String    @default("Fulton GA")
  book_page     String?
  document_link String?
  state         String    @default("GA")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  is_new        Boolean   @default(true)
  userId        String
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([case_number])
}

model cobb_ga_filing {
  case_number   String    @id @db.VarChar(255)
  document_type String?   @db.VarChar(255)
  filing_date   DateTime? @db.Date
  debtor_name   String?
  claimant_name String?
  county        String?   @default("Cobb GA") @db.VarChar(255)
  book_page     String?   @default("") @db.VarChar(255)
  document_link String?   @default("")
  state         String?   @default("GA") @db.VarChar(10)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  is_new        Boolean?  @default(true)
  userId        String    @db.VarChar(255)
  user          String?   @default("user") @db.VarChar(255)

  @@index([case_number], map: "idx_cobb_ga_filing_case_number")
  @@index([filing_date], map: "idx_cobb_ga_filing_filing_date")
  @@index([userId], map: "idx_cobb_ga_filing_user_id")
}

model User {
  id                    String                   @id @default(uuid())
  email                 String                   @unique
  firstName             String
  password              String
  userType              String                   @default("LPH")
  createdAt             DateTime                 @default(now())
  accounts              Account[]
  brevardFlFilings      brevard_fl_filing[]
  fultonGaFilings       fulton_ga_filing[]
  harrisCountyFilings   harris_county_filing[]
  hillsboroughNhFilings hillsborough_nh_filing[]
  lisPendensFilings     lis_pendens_filing[]
  mdCaseSearchFilings   md_case_search_filing[]
  scrapingJobs          scraping_job[]
  sessions              Session[]
}

model scraping_job {
  id                String    @id @default(uuid())
  job_type          String
  status            String
  created_at        DateTime  @default(now())
  completed_at      DateTime?
  parameters        Json?
  result            Json?
  error_message     String?
  records_processed Int?
  userId            String
  user              User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model cobb_ga_filings {
  id              Int       @id @default(autoincrement())
  street_address  String
  mortgage_amount String?   @db.VarChar(255)
  tax_deed_dated  DateTime? @db.Date
  user_id         String    @db.VarChar(255)
  user_type       String?   @default("COBB_GA") @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)

  @@index([tax_deed_dated], map: "idx_cobb_ga_filings_tax_deed_dated")
  @@index([user_id], map: "idx_cobb_ga_filings_user_id")
}

model harris_county_filing {
  id                String    @id @default(uuid())
  case_number       String    @unique
  filing_date       DateTime?
  doc_type          String    @default("L/P")
  subdivision       String?
  section           String?
  block             String?
  lot               String?
  property_address  String?
  parcel_id         String?
  ai_summary        String?   @db.Text
  county            String    @default("Harris")
  state             String    @default("TX")
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  is_new            Boolean   @default(true)
  userId            String
  user              User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([case_number])
  @@index([filing_date])
  @@index([parcel_id])
}
