// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model lis_pendens_filing {
  case_number      String   @id
  case_url         String?
  file_date        DateTime
  property_address String
  filing_no        String?
  volume_no        String?
  page_no          String?
  county           String
  created_at       DateTime @default(now())
  is_new           Boolean  @default(true)
  doc_type         String
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model md_case_search_filing {
  case_number                String   @id
  case_url                   String?
  file_date                  DateTime?
  party_name                 String?
  case_type                  String?
  county                     String?
  created_at                 DateTime @default(now())
  is_new                     Boolean  @default(true)
  doc_type                   String?
  userId                     String
  property_address           String?
  defendant_info             String?
  case_details_raw           String?
  case_details_scraped_at    DateTime?
  user                       User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model hillsborough_nh_filing {
  id                String   @id @default(uuid())
  document_number   String   @unique
  document_url      String?
  recorded_date     DateTime?
  instrument_type   String?
  grantor           String?
  grantee           String?
  property_address  String?
  book_page         String?
  consideration     String?
  legal_description String?
  county            String   @default("Hillsborough NH")
  state             String   @default("NH")
  filing_date       String?
  amount            String?
  parties           String?
  location          String?
  status            String   @default("active")
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  is_new            Boolean  @default(true)
  doc_type          String   @default("lien")
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  @@index([userId])
  @@index([document_number])
}

model User {
  id                        String                      @id @default(uuid())
  email                     String                      @unique
  firstName                 String
  password                  String
  userType                  String                      @default("LPH") // "LPH", "MD_CASE_SEARCH", or "HILLSBOROUGH_NH"
  createdAt                 DateTime                    @default(now())
  lisPendensFilings         lis_pendens_filing[]
  mdCaseSearchFilings       md_case_search_filing[]
  hillsboroughNhFilings     hillsborough_nh_filing[]
  scrapingJobs              scraping_job[]
  accounts                  Account[]
  sessions                  Session[]
}

model scraping_job {
  id                String     @id @default(uuid())
  job_type          String
  status            String
  created_at        DateTime   @default(now())
  completed_at      DateTime?
  parameters        Json?
  result            Json?
  error_message     String?
  records_processed Int?
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

